<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/+AAB//wAA//8AAP//AAD//4AA//+AAf8=
</value>
  </data>
</root>